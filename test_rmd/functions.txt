class ActuatorInterface:
    def __init__(self, driver: CanDriver, id: int) -> None: ...
    
    # Getter methods
    def getAcceleration(self) -> float: ...
    def getCanId(self) -> int: ...
    def getControlMode(self) -> str: ...
    def getControllerGains(self) -> tuple: ...
    def getMotorModel(self) -> str: ...
    def getMotorPower(self) -> float: ...
    def getMotorStatus1(self) -> dict: ...
    def getMotorStatus2(self) -> dict: ...
    def getMotorStatus3(self) -> dict: ...
    def getMultiTurnAngle(self) -> float: ...
    def getMultiTurnEncoderOriginalPosition(self) -> int: ...
    def getMultiTurnEncoderPosition(self) -> int: ...
    def getMultiTurnEncoderZeroOffset(self) -> int: ...
    def getRuntime(self) -> float: ...
    def getSingleTurnAngle(self) -> float: ...
    def getSingleTurnEncoderPosition(self) -> int: ...
    def getVersionDate(self) -> str: ...

    # Motor control methods
    def lockBrake(self) -> None: ...
    def releaseBrake(self) -> None: ...
    def reset(self) -> None: ...
    def sendCurrentSetpoint(self, current: float) -> None: ...
    def sendPositionAbsoluteSetpoint(self, position: float) -> None: ...
    def sendTorqueSetpoint(self, torque: float) -> None: ...
    def sendVelocitySetpoint(self, velocity: float) -> None: ...

    # Setter methods
    def setAcceleration(self, acceleration: float) -> None: ...
    def setCanBaudRate(self, baud_rate: int) -> None: ...
    def setCanId(self, can_id: int) -> None: ...
    def setControllerGains(self, gains: tuple) -> None: ...
    def setCurrentPositionAsEncoderZero(self) -> None: ...
    def setEncoderZero(self) -> None: ...
    def setTimeout(self, timeout: float) -> None: ...

    # Shutdown methods
    def shutdownMotor(self) -> None: ...
    def stopMotor(self) -> None: ...